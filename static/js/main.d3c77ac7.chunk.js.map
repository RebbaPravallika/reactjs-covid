{"version":3,"sources":["StatsBox.js","util.js","Map.js","Tables.js","LGraph.js","App.js","serviceWorker.js","index.js"],"names":["StatsBox","title","isRed","isGreen","active","isGrey","cases","total","props","ocpp","population","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortByCases","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","ChangeView","useMap","setView","scrollWheelZoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Tables","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","dat","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LGraph","useState","setData","buildData","lastDataPoint","chartData","date","newdatapoint","x","y","push","useEffect","fetch","then","response","json","chartdata","fetchdata","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryINFO","setCountryInfo","tableData","setTableData","lng","mapcenter","setMapCenter","mapzoom","setMapZoom","isLoading","setLoading","mapCountries","setMapCountries","setCasesType","name","iso3","sorted_data","getCountries","onCountryChanged","event","countryCodeIndex","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3c77ac7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card,CardContent,Typography}  from \"@material-ui/core\";\r\nimport \"./StatsBox.css\"\r\nfunction StatsBox({title,isRed,isGreen,active,isGrey,cases,total,ocpp,population, ...props}) {\r\n    return (\r\n        <div>\r\n            <Card className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"} ${isGrey && \"infoBox--grey\"}`}\r\n            onClick={props.onClick}>\r\n                <CardContent>\r\n                    <Typography color=\"primary\">{title}</Typography>\r\n                    <h2 className={`infoBox_cases ${isGreen && \"infoBox_cases--green\"} ${isGrey && \"infoBox_cases--grey\"}`}>{cases}</h2>\r\n                    <Typography className=\"infoBox_total\" color=\"textSecondary\"><bold>Total </bold>{total}</Typography>\r\n                    \r\n                </CardContent>\r\n            </Card>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default StatsBox\r\n","\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      //rgb: \"rgb(204, 16, 52)\",\r\n      //half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      //rgb: \"rgb(125, 215, 29)\",\r\n      //half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      //rgb: \"rgb(251, 68, 67)\",\r\n      //half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortByCases=(data) =>{\r\n    const sortedData=[...data];\r\n\r\n\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases > b.cases){\r\n            return -1;\r\n        } else{\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n};\r\nexport const showDataOnMap = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]/10) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      \r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ \r\n              backgroundImage: `url(${country.countryInfo.flag})`\r\n              }}\r\n            > </div>\r\n            \r\n          \r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n         \r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries, casesType,center,zoom}) {\r\n  function ChangeView({center,zoom}){\r\n    const map=useMap();\r\n    map.setView(center,zoom);\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom} scrollWheelZoom={false} casesType={casesType}>\r\n        <ChangeView center={center} zoom={zoom}/>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Tables.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Tables({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"000,000\")}</strong></td>\r\n                </tr>\r\n\r\n            ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tables;\r\n","import React,{useState,useEffect} from 'react';\r\nimport {Line} from\"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options={\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect:false,\r\n        callbacks:{\r\n            label:function(tooltipItem,dat){\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n                type:\"time\",\r\n                time:{\r\n                    format:\"MM/DD/YY\",\r\n                    tooltipFormat:'ll',\r\n                },\r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:{\r\n                    display:false,\r\n                },\r\n                ticks:{\r\n                    callback:function(value,index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LGraph({casesType, ...props}) {\r\n    const[data,setData]= useState({});\r\n\r\n    const buildData=(data,casesType) =>{\r\n        const chartData=[];\r\n        let lastDataPoint;\r\n        for(let date in data.cases) {\r\n            if (lastDataPoint){\r\n                const newdatapoint={\r\n                    x:date,\r\n                    y:data[casesType][date]-lastDataPoint\r\n                }\r\n                chartData.push(newdatapoint);\r\n            }\r\n            lastDataPoint=data[casesType][date];       \r\n        };\r\n        return chartData;\r\n    \r\n    };\r\n\r\n    useEffect(()=>{\r\n        const fetchdata= async()=>{\r\n            await  fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response =>response.json())\r\n            .then(data =>{\r\n                const chartdata=buildData(data,casesType);\r\n                setData(chartdata);\r\n        \r\n            });\r\n\r\n        }\r\n        fetchdata();\r\n   \r\n},[casesType]);\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 &&(\r\n            <Line \r\n            options={options}\r\n            data={{\r\n                datasets:[{\r\n                    data:data,\r\n                    backgroundColor:'rgba(202,14,50,0.5)',\r\n                    borderColor:\"#CC1022\",\r\n\r\n                },\r\n            ],\r\n            }}/>)}\r\n          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LGraph;\r\n","import React,{ useState, useEffect} from 'react';\nimport './App.css';\nimport StatsBox from './StatsBox';\nimport Map from './Map';\nimport Tables from './Tables';\nimport {sortByCases,prettyPrintStat} from \"./util\";\nimport LGraph from \"./LGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport{\n  MenuItem,FormControl,Select,Card,CardContent,\n} from \"@material-ui/core\";\nimport \"./StatsBox.css\"\n\nfunction App() {\n  const [countries,setCountries]=useState([]);\n  const [country,setCountry]=useState('WorldWide');\n  const [countryINFO,setCountryInfo]=useState({});\n  const [tableData,setTableData]=useState([]);\n  const [mapcenter, setMapCenter] = useState({ lat: 20.5937, lng: 78.9629 });\n  const [mapzoom, setMapZoom] = useState(3);\n  const[isLoading,setLoading]=useState(false);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response => response.json()))\n    .then(data =>{\n      setCountryInfo(data);\n    });\n  },[]);\n\n\n  useEffect(()=>{\n    const getCountries =async() =>{\n      await fetch(\"https:disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries=data.map((country) =>(\n          {\n            name: country.country,\n            value: country.countryInfo.iso3\n          }));\n          const sorted_data=sortByCases(data);\n          setTableData(sorted_data);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountries();\n  },[]);\n  const onCountryChanged= async(event) =>{\n    setLoading(true);\n    const countryCodeIndex=event.target.value;\n    setCountry(countryCodeIndex);\n\n    const url=\n    countryCodeIndex==='WorldWide' \n    ? 'https://disease.sh/v3/covid-19/all'\n    :`https://disease.sh/v3/covid-19/countries/${countryCodeIndex}`;\n\n     await fetch(url).then((response)=>response.json())\n    .then((data)=>{\n      setCountry(countryCodeIndex);\n      setCountryInfo(data);\n      setLoading(false);\n      if(countryCodeIndex==='WorldWide'){\n        setMapCenter([20.5937,78.9629 ]);\n      }\n      else{\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long]);}\n      setMapZoom(4);\n    });\n      console.log(countryINFO);\n  };\n  /*console.log(countryINFO);*/\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__firstpart\">\n      <div className=\"app__header\">\n          <h1 className=\"title\">COVID-19 tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChanged}>\n                <MenuItem value=\"WorldWide\">WorldWide</MenuItem>\n                {countries.map((country) =>(\n                 <MenuItem value={country.value}>{country.name}</MenuItem>\n\n          ))}\n  \n            </Select>\n\n          </FormControl>\n      </div>\n      {/*header*/}\n      {/*title+input*/}\n      <div className=\"app__Statistics\">\n        <StatsBox className=\"infoBox_cases\"\n        onClick={(e) => setCasesType(\"cases\")}\n        isRed \n        active={casesType===\"cases\"} title=\"Cases\" \n        cases={prettyPrintStat(countryINFO.todayCases)} \n        total={prettyPrintStat(countryINFO.cases)}\n        isLoading={isLoading}\n        />\n\n        <StatsBox className=\"infoBox_recovered\"\n        isGreen\n        onClick={(e) => setCasesType(\"recovered\")}\n        title=\"Recovered\" \n        active={casesType===\"recovered\"}\n        cases={prettyPrintStat(countryINFO.todayRecovered)} \n        total={prettyPrintStat(countryINFO.recovered)}\n        isLoading={isLoading}\n        \n        />\n\n        <StatsBox className=\"infoBox_deaths\" \n        onClick={(e) => setCasesType(\"deaths\")}\n        title=\"Deaths\" \n        isGrey\n        active={casesType===\"deaths\"}\n        cases={prettyPrintStat(countryINFO.todayDeaths)} \n        total={prettyPrintStat(countryINFO.deaths)}\n        isLoading={isLoading}/>\n      </div>\n      \n      <div>\n        <Map center={mapcenter}\n        zoom= {mapzoom}\n        countries={mapCountries}\n          casesType={casesType}/>\n      </div>\n\n      {/*map*/}\n\n      </div>\n      <Card className=\"app__secondPart\">\n         <CardContent>\n           <h3>Live Cases by Country</h3>\n           <Tables countries={tableData}/>\n           <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n           <LGraph className=\"app__graph\" casesType={casesType}/>\n\n         </CardContent>\n         {/* Table */}\n        {/* Graph */}\n         \n      </Card>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}